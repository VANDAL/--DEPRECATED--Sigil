Here are a list of changes from the original Callgrind required for Sigil.- Sid

1. The Makefile is changed with some additions to compile our code as well. These changes need to be propagated to both the noopt and opt Makefiles. The current Makefile is a modified version of the noopt version.
2. sigil.c and sigil.h which have all the necessary data structures and code to instrument dataflow. These are the main source files for the Sigil tool
3. sim.c, bbcc.c and main.c all have sigil.h included at the top so as to include the right global variables and function in scope.
4. sim.c is changed with the log_I/D functions to also have calls to storeIDRWcontext.
5. main.c is changed to have calls in the post and pre functions of valgrind, to initialize some global variables needed for our instrumentation. Also added logging of events for operations.
6. bbcc.c is changed. setup_bbcc is changed to add a bit of code to initialize some global variables that maintain a recent call history to be used during instrumentation of a basic block. Also added in thread initialization for a new thread
7. Added .deps/callgrind_amd64_linux-sigil.Po and .deps/callgrind_x86_linux-sigil.Po so that dependencies are outlined clearly in the Make clause.
8. global.h is changed to include some instrumentation to capture flops and iops. Also extended command line options data structure. Search on -> sid
9. main.c Changes to incorporate tracking operations (flops and iops) by inserting helper functions log_ops and addevent_ops and making the appropriate changes in CLG_(instrument) and flushEvents.
10. sim.c: Added information for a new set of events named EG_OPS and initialized it.
11. clo.c: Added new command line options to Callgrind, specifically for Sigil. 
12. main.c: syscalltime changes
13. tests: Added tests and modified the expected output of existing tests, based on some changes made to Callgrind (printing out flops and iops, for example). Added tests for Sigil. 

- Sid
